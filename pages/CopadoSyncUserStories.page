<apex:page standardController="copado__Project__c" lightningStylesheets="true">
    <head>
       <script type="text/javascript" src="{!URLFOR($Resource.copado__Statics,'js/libs/jquery.min.1.10.2.js')}"></script>
        </head>
        <script type="text/javascript">
               var $copado = jQuery.noConflict(),
               __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
       <script type="text/javascript" src="/soap/ajax/32.0/connection.js"></script>
       <script type="text/javascript" src="/soap/ajax/32.0/apex.js"></script>
<script>

/*
Copyright (c) 2015 Copado Solutions SL

*/

//check required fields
var credentialId = '{!copado__Project__c.Change_Management_Integration__c}',
projectExternalId = '{!copado__Project__c.External_Id__c}',
workspaceId = '{!copado__Project__c.Workspace_Id__c}',
projectId = '{!copado__Project__c.Id}',
projectSprint ='{!copado__Project__c.Sprint__c}',
remainingIssues = 1,
currentStartMark = 0;



/**************************************************************************************************************
 * Copado Adapter to JIRA
 *
 * This class contains the basic methods to be called by the controller class
 * These methods are called in order to retrieve and convert external User Stories into Copado User Stories
 *
 * If you want to write your custom adapter, you will only have to extend this object and overide the methods you need.
 * @type {Object}
 */
var copadoJIRAAdapter = {

    /**
     * This method should return the body data to send in POST messages.
     * @return {[type]} [description]
     */
    getBody: function(){ return {} },

    /**
     * This method returns the absolute url to call the API method
     *
     * IMPORTANT: remember that this domain needs to be set in Salesforce > Setup > Remote Sites
     *
     * @param  {[type]} projectExternalId [description]
     * @return {[type]}                   [description]
     */

    getIssueType: function(){
     var proyectType = '{!copado__Project__c.ProjectType__c}';

     if(proyectType == 'Bugfix' || proyectType == 'Error'){
       return 'Bug';
     } else if(proyectType == 'UserStories' || proyectType == 'Historia') {
       return 'Story';
     } else {
       return null;
     }

    },

    getUrl: function(projectExternalId, remainingIssues, currentStartMark, projectSprint){
        var startAt = '';
        if(remainingIssues > 0){
          startAt = '&startAt=' + currentStartMark;
          // TODO: Finalizar el calculo de los issues que faltan por cubrir
        }
        var app = this.controller;
        var issueType = app.adapter.getIssueType();
        console.log('IssueType: ' + JSON.stringify(issueType));

        if(issueType == 'Bug') {
          // Si tengo un issuetype en el Project de tipo bug
          // Me traigo el Workstream Discovery que es el scrum (picklist)
          var workstream = '{!copado__Project__c.Workstream__c}';
          workstream = workstream.split(' ').join('%20');
          //console.log(JSON.stringify(workstream));
          var url = app.data.credential.endpoint +'search?jql=project='
          +projectExternalId+'%20and%20(issueType='+ issueType +'%20and%20%22Workstream%20Discovery%22=%22'+ workstream +'%22)&maxResults=50' + startAt;
        } else if (issueType == 'Story'){
          // Si tengo un issuetype en el Project de tipo UserStories
          // Me traigo el Workstream Discovery que es el scrum (picklist)
          var workstream = '{!copado__Project__c.Workstream__c}';
          workstream = workstream.split(' ').join('%20');
          //console.log(JSON.stringify(workstream));

          // Obtener US por scrum por sprint
          var querySprint = '';
          if(projectSprint != null){
            querySprint = '%20AND%20Sprint%20=%20' + projectSprint +'%20';
          }
          var url = app.data.credential.endpoint +'search?jql=project='
          +projectExternalId+'%20and%20(issueType='+ issueType +'%20and%20%22Workstream%20Discovery%22=%22'+ workstream +'%22'+ querySprint +')&maxResults=50' + startAt;
        } else {
          var url = app.data.credential.endpoint +'search?jql=project='+projectExternalId+'%20and%20(issueType='+ issueType +')&maxResults=50' + startAt;
        }
        // TODO: Handle the currentStartMark to update the url
        console.log('Calling url: ', url);
        return url;
    },

    /**
     * This method returns the request method for the adapter
     * @return {[type]} [description]
     */
    getMethod: function(){
        return 'GET';
    },
    /**
     * Should return the request header
     * You have to override this method if you need to change from Basic Authentication to other type,
     * or if you need to add additional headers
     * @return {[type]} [description]
     */
    getHeaders: function(){
        var app = this.controller;
        return {
           "Content-Type": "application/json",
           "Authorization": app.makeBasicAuthenticationHeader(app.data.credential.username,app.data.credential.password)
        };
    },
    /**
     * Parse API Response
     * @param  {[type]} res [description]
     * @return {[type]}     [description]
     */
    parseAPIResponse: function(res){
        return JSON.parse(res);
    },
    /**
     * Failure handler
     * @param  {[type]} res     [description]
     * @param  {[type]} request [description]
     * @return {[type]}         [description]
     */
    onFailure : function(res, request) {

        var app = this.controller;
        console.error(res, request);
        if(request.status == 401){
            alert(app.labels.LOGIN_ERROR);
        }else{
            try{
                //try to parse and show the remote error
                res = JSON.parse(res);
            }catch(e){ res = false;}
            var app = this.controller;
            alert(res&&res.errorMessages&&res.errorMessages.length&&res.errorMessages[0]||app.labels.UNEXPECTED_ERROR_ON+app.data.credential.externalSystem);
        }
    },
    /**
     * Returns the ammount of total issues from the API response
     * @param  {[type]} res [description]
     * @return {[type]}     [description]
     */
    getTotalIssues : function(res){
        return res.total;
    },
    /**
     * Returns the list of issues from the API response
     * @param  {[type]} res [description]
     * @return {[type]}     [description]
     */
    getIssueList : function(res){
        return res.issues;
    },
    /**
     * FIELD MAPPINGS - JIRA
     * This method should transform the API issue to a Copado User Story
     * Notice that the Copado object should contain the package namespace
     * @param  {[type]} obj [description]
     * @return {[type]}     [description]
     */
    getCopadoUserStoryFromAPIObject : function(obj){

        //console.log(obj.fields.issuetype.name);

        // Soporte para IssueType del tipo Bug
        if(obj.fields.issuetype.name == 'Bug' || obj.fields.issuetype.name == 'Error'){

            var app = this.controller;

            //Create the SObject instance
            var us = new sforce.SObject(app.conf.ns+'User_Story__c');
            //set the external Id
            us.External_Id__c = obj.id;

            //set the fields
            var userStorySummary = obj.fields.summary;
            us[app.conf.ns+'User_Story_Title__c'] = obj.key + ' - ' + userStorySummary.substring(0,240) + '...';
            us[app.conf.ns+'Status__c'] = obj.fields.status.name;
            us[app.conf.ns+'Project__c'] = app.data.projectId;
            if(obj.fields.description != null){
              us[app.conf.ns+'Functional_Specifications__c'] = obj.fields.description;
            }
            if(obj.fields.customfield_11600 != null){
              var accCrit = obj.fields.customfield_11600;
              us[app.conf.ns+'Acceptance_Criteria__c'] = accCrit.substring(0,250) + '...';
            } // Acceptance_Criteria__c Text Area(255)
            if(obj.fields.customfield_10004 != null){
              us[app.conf.ns+'Story_Points_SFDC__c'] = obj.fields.customfield_10004;
            }
            us[app.conf.ns+'Technical_Specifications__c'] = '<a href=https://vlocity.atlassian.net/browse/'+ obj.key +' target=_blank>' + obj.key + '</a>';
            // customfield_12702 => Worstream Discovery
            //if(obj.fields.customfield_12702 != null){
              //us[app.conf.ns+'Story_Points_SFDC__c'] = obj.fields.customfield_12702;
              //console.log('Bug WS: ' + obj.fields.customfield_12702);
            //}

            return us;

        } else if(obj.fields.issuetype.name == 'Story' || obj.fields.issuetype.name == 'Historia'){

            var app = this.controller;

            //Create the SObject instance
            var us = new sforce.SObject(app.conf.ns+'User_Story__c');
            //set the external Id
            us.External_Id__c = obj.id;

            //set the fields
            var userStorySummary = obj.fields.summary;
            us[app.conf.ns+'User_Story_Title__c'] = obj.key + ' - ' + userStorySummary.substring(0,240) + '...';
            us[app.conf.ns+'Status__c'] = obj.fields.status.name;
            us[app.conf.ns+'Project__c'] = app.data.projectId;
            if(obj.fields.description != null){
              us[app.conf.ns+'Functional_Specifications__c'] = obj.fields.description;
            }
            if(obj.fields.customfield_11600 != null){
              var accCrit = obj.fields.customfield_11600;
              us[app.conf.ns+'Acceptance_Criteria__c'] = accCrit.substring(0,250) + '...';
            } // Acceptance_Criteria__c Text Area(255)
            if(obj.fields.customfield_10004 != null){
              us[app.conf.ns+'Story_Points_SFDC__c'] = obj.fields.customfield_10004;
            }
            us[app.conf.ns+'Technical_Specifications__c'] = '<a href=https://vlocity.atlassian.net/browse/'+ obj.key +' target=_blank>' + obj.key + '</a>';
            // customfield_10004 => Story Points
            if(obj.fields.customfield_10004 != null){
              //console.log('Story Points: ' + obj.fields.customfield_10004);
              us[app.conf.ns+'Story_Points_SFDC__c'] = obj.fields.customfield_10004;
              //console.log('Bug WS: ' + obj.fields.customfield_12702);
            }

            return us;

        }


        /*else if(obj.fields.issuetype.name == 'Epic'){

            var app = this.controller;

            //Create the SObject instance
            var us = new sforce.SObject(app.conf.ns+'User_Story__c');
            //set the external Id
            us.External_Id__c = obj.id;

            //set the fields
            us[app.conf.ns+'User_Story_Title__c'] = obj.key + ' - ' + obj.fields.summary;
            us[app.conf.ns+'Status__c'] = obj.fields.status.name;
            us[app.conf.ns+'Project__c'] = app.data.projectId;
            us[app.conf.ns+'Functional_Specifications__c'] = obj.fields.description;

            return us;

        } else if(obj.fields.issuetype.name == 'Bug') {

            var app = this.controller;

            //Create the SObject instance
            var us = new sforce.SObject(app.conf.ns+'User_Story__c');
            //set the external Id
            us.External_Id__c = obj.id;

            //set the fields
            us[app.conf.ns+'User_Story_Title__c'] = obj.key + ' - ' + obj.fields.summary;
            us[app.conf.ns+'Status__c'] = obj.fields.status.name;
            us[app.conf.ns+'Project__c'] = app.data.projectId;
            us[app.conf.ns+'Functional_Specifications__c'] = obj.fields.description;

            return us;

        } */ else {
            return false;
        }
    }

};



/**
 * Main Importer controller class.
 * Important: Do not change these methods except for the "conf" attributes which may be modified as necessary.
 *
 * @type {Object}
 */
var app = {

    data:{},

    conf:{
        /**
         * To extend this system map here the copadoAdapter
         * Remember this class should implement next methods:
         *
         * @type {Object}
         */
        adapters:{
            'JIRA': copadoJIRAAdapter
        },
        CREDENTIAL_SFDC_OBJECT : 'Change_Management_Integration_Credential__c',
        ns: 'copado__'
    },

    labels: {
        COMPLETE_FIELDS_ERROR: 'Before retrieving User Stories, you need to complete the Change Management Integration and External Id field.',
        LOGIN_ERROR: 'Login Error. Selected cretendials are invalid. ',
        CREDENTIALS_MISSING: 'The selected credentials are missing. The record may have been removed or unshared.',
        EMPTY_SYNC: 'There were no User Stories needing to be imported',
        SUCCESS_SYNC: ' User Stories were successfully updated/inserted',
        UNEXPECTED_ERROR_ON: 'Unexpected error on ',
        UNEXPECTED_ERROR_WHILE_GETTING_CREDENTIALS: 'Unexpected error while getting Credentials.',
        UNEXPECTED_API_RESPONSE: 'Unexpected API response.',
        NO_ADAPTER_CONFIGURED: 'There is no adapter configured for ',
        CONFIGURED_ADAPTER_ERROR: 'Configured adapter for _TYPE_ does not exist'
    },

    /**
     * Static helpers
     * @type {Object}
     */
    html: {
        cssLocker: '#screenLocker{position:fixed; top:0; left:0; height:100%; width:100%; z-index:1000; background-color:rgba(33,33,33,0.2);}#screenLocker p{position:absolute; top:50%; left:50%; margin-right:-50%; transform:translate(-50%,-50%); padding-top:15px; border:1px solid grey; padding:30px; border-radius:10px; background-color:#fff;}',
        screenLocker: '<div id="screenLocker" ><p><img src="/img/loading.gif" /> Loading...</p></div>'
    },

    /**
     * This method creates the screenlocker element
     * @return {[type]} [description]
     */
    createScreenLocker: function(){

        var $screenlocker = $copado('#screenLocker');
        if($screenlocker.length){
            $screenlocker.show();
        }else{
            $copado('body')
                .append('<style>'+app.html.cssLocker+'</style>')
                .append(app.html.screenLocker);
        }
    },

    /**
     * This method hides the screenLocker
     * @return {[type]} [description]
     */
    hideScreenLocker: function(){
        $copado('#screenLocker').hide();
    },

    /**
     * A generic method to get the credentials from the CREDENTIAL_SFDC_OBJECT SObject.
     * This method should be extended if new fields are needed.
     * The extension should fill the app.data.credentials obj.
     *
     * @param  {[type]} credentialId [description]
     * @return {[type]}              [description]
     */
    getCredentials: function(credentialId){

        var query = 'SELECT Username__c, Password__c, Endpoint__c, Authentication_Method__c,External_System__c FROM '+app.conf.CREDENTIAL_SFDC_OBJECT+' WHERE Id=\''+credentialId+'\' LIMIT 1';

        console.log('Getting credentials...');
        try{
            var records = sforce.connection.query(query).getArray('records');
            if(records == null || records.length == 0){
                alert(app.labels.CREDENTIALS_MISSING);
            }else{
                var credential = records[0];
                //Set local values to those retrieved from Salesforce
                app.data.credential = {
                    externalSystem: credential.External_System__c,
                    username: credential.Username__c,
                    password: Base64.decode(credential.Password__c),
                    method: credential.Authentication_Method__c,
                    endpoint: credential.Endpoint__c
                };
                //console.log('Credentials ', app.data.credential)
            }
        }catch(e){
            //In case of an error during the query process, just alert the user and end the process
            alert(app.labels.UNEXPECTED_ERROR_WHILE_GETTING_CREDENTIALS);
            console.error(e);
            app.hideScreenLocker();
        }
    },

    /**
     * This is the main method which:
     *   - sends the request
     *   - parses the response
     *   - transforms the external object
     *   - upserts the imported issues
     *
     * @param  {[type]} projectExternalId [description]
     * @return {[type]}                   [description]
     */
    retrieveFromPMAPI: function(projectExternalId, remainingIssues,
      currentStartMark, projectSprint){
        console.log('Retrieving from PM API');

        // use sforce proxy to access
        sforce.connection.remoteFunction({
            url : app.adapter.getUrl(projectExternalId, remainingIssues, currentStartMark, projectSprint),
            requestHeaders: app.adapter.getHeaders(),
            method: app.adapter.getMethod(),
            requestData: app.adapter.getBody(),

            onSuccess : function(res) {
              console.log('retrieveFromPMAPI onSuccess');
                try{
                    res = app.adapter.parseAPIResponse(res);
                }catch(e){
                    console.error(e);
                    alert(app.labels.UNEXPECTED_API_RESPONSE);
                    return;
                }
                app.convertToCopadoUserStory(res,remainingIssues,currentStartMark);
            },

            onFailure : function(res, request) {
              console.log('retrieveFromPMAPI onFailure');
                console.error(res, request);
                app.adapter.onFailure(res,request);
                app.hideScreenLocker();
            },
            timeout: 25000
        });
    },

    /**
     * Generic helper to handle basic authentication
     * @param  {[type]} user [description]
     * @param  {[type]} pass [description]
     * @return {[type]}      [description]
     */
    makeBasicAuthenticationHeader: function(user,pass){
        return 'Basic '+ Base64.encode(user +':'+pass);
    },

    /**
     * Generic helper to handle authentication tokens
     * @param  {[type]} pass [description]
     * @return {[type]}      [description]
     */
    makeAuthenticationTokenHeader: function(pass){
        return 'Bearer '+ pass;
    },

    /**
     * This should be overwritten by adapter type (Jira, VersionOne etc..)
     * @return {[type]} [description]
     */
    convertToCopadoUserStory: function(res,remainingIssues,currentStartMark){
        try{
            var records = [],
            totalIssues = app.adapter.getTotalIssues(res),
            issues = app.adapter.getIssueList(res),
            len = issues.length,
            needsPaginationCall = true;

            //console.log('issues: ' + issues);
            //console.log('len: ' + len);
            console.log(' ');


            // Checking current loop status
            console.log('## BEFORE CALCULATION ##');
            console.log('TotalIssues: ' + totalIssues);
            console.log('Issues length: ' + len);
            console.log('NeedsPag: ' + needsPaginationCall);
            console.log('remainingIssues: ' + remainingIssues);
            console.log('currentStartMark: ' + currentStartMark);
            console.log('########################');
            console.log(' ');

            //if(remainingIssues > 0){
              if(remainingIssues == 1){
                // Si viene remainingIssues=1, es la primer ejecucion
                // y ya va a recorrer 50 registros
                remainingIssues = totalIssues - 50;
              } else if (remainingIssues > 1){
                // si quedan mas de uno es porque aun esta recorriendo las lista
                // la vamos vaciando con cada recorrido
                remainingIssues = remainingIssues - 50;
              } else if (remainingIssues <= 0){
                // Si queda 0 o menos de cero es porque vaciamos la lista
                // No necesitamos recorrerla mas
                remainingIssues = 0;
                needsPaginationCall = false;
              } else {
                remainingIssues = 0;
                needsPaginationCall = false;
              }

              // Aumentamos la marca de la query de la url, porque si se pasa
              // de totalIssues vuelve vacio y no rompe nada
              currentStartMark = currentStartMark + 50;
            //}

            
            console.log(' ');
            // Checking current loop status
            console.log('## AFTER CALCULATION ##');
            console.log('TotalIssues: ' + totalIssues);
            console.log('Issues length: ' + len);
            console.log('NeedsPag: ' + needsPaginationCall);
            console.log('remainingIssues: ' + remainingIssues);
            console.log('currentStartMark: ' + currentStartMark);
            console.log('########################');
            console.log(' ');

            while(len--){
                var obj = app.adapter.getCopadoUserStoryFromAPIObject(issues[len]);
                //console.log(obj);
                obj && records.push(obj);
            }

            console.log(/*records,*/'** Processed records: ' + records.length);

            if(records.length){
                // this will insert or update a Issue or User Story
                var batch = [];
                var batchNumber = 1;
                var batchSize = 50;
                var tmp = [];
                for(var i=0; i<records.length; i++){
                    if(tmp.length == batchSize){
                        batch[batchNumber] = tmp;
                        tmp = [];
                        batchNumber++;
                    }
                    tmp.push(records[i]);
                }
                batch[batchNumber] = tmp;

                console.log('Batch size: '+batchNumber);
                for(var j=1; j<=batchNumber; j++){
                    var result = sforce.connection.upsert('External_Id__c', batch[j]);
                    //console.log('upsert result: ', result);
                    var errors = "";
                    for (var i=0; i<result.length; i++) {
                      if (!result[i].getBoolean("success")) {
                        errors += result[i].errors.message +"\n";
                      }
                    }
                }
                if(needsPaginationCall==true){
                  // TODO: volver a llamar con el paginado &maxResults=100&startAt=100
                  app.init(credentialId, projectExternalId, projectId, remainingIssues, currentStartMark, projectSprint)
                } else {
                  if(errors == ""){
                    alert(totalIssues + app.labels.SUCCESS_SYNC);


                    app.hideScreenLocker();
                      console.log(window.location.hostname);
                      console.log(window.location.hostname+ "/{!copado__Project__c.Id}");
                      //window.location.href = 'https://'+window.location.hostname + "/{!copado__Project__c.Id}";

                      //window.open('https://'+window.location.hostname + "/{!copado__Project__c.Id}", '_blank');
                  } else{
                    alert(errors);
                    app.hideScreenLocker();
                  }
                }
            }else{
                alert(app.labels.EMPTY_SYNC);
                app.hideScreenLocker();
            }
        }
        catch(e){
            alert(app.labels.UNEXPECTED_ERROR_ON+' conversion of response object to Copado User Story.');
            console.error(e);
            console.error('Response was: ', res);
            app.hideScreenLocker();
        }
    },

    /**
     * Validate and Retrieve User Stories
     * @param  {[type]} credentialId      [description]
     * @param  {[type]} projectExternalId [description]
     * @return {[type]}                   [description]
     */
    init: function(credentialId, projectExternalId, projectId, remainingIssues,
      currentStartMark, projectSprint){

        //validate required fields
        if(!credentialId || !projectExternalId){
            alert(app.labels.COMPLETE_FIELDS_ERROR);
        }else{
            //start process
            app.data.projectId = projectId;
            app.data.projectExternalId = projectExternalId;
            app.createScreenLocker();

            app.getCredentials(credentialId);
            if(app.data.credential){
                //check that the adapter exists for the credential type
                app.data.Type = app.data.credential.externalSystem;
                // check that config exists
                if(!app.conf.adapters[app.data.Type]){
                    alert(app.labels.NO_ADAPTER_CONFIGURED+app.data.Type);
                    return;
                }
                app.adapter = app.conf.adapters[app.data.Type];
                app.adapter.controller = app;

                //check adapter class exists
                if(!app.adapter){
                    alert(app.labels.CONFIGURED_ADAPTER_ERROR.replace('_TYPE_',app.data.Type));
                    return;
                }
                //call retriever
                app.retrieveFromPMAPI(projectExternalId, remainingIssues,
                  currentStartMark, projectSprint);
            }else{
                console.error('No credentials found.')
            }
        }
    }
};

//*******************
//Utils stuff
var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(c){var a="",d,b,f,g,h,e,j=0;for(c=Base64._utf8_encode(c);j<c.length;)d=c.charCodeAt(j++),b=c.charCodeAt(j++),f=c.charCodeAt(j++),g=d>>2,d=(d&3)<<4|b>>4,h=(b&15)<<2|f>>6,e=f&63,isNaN(b)?h=e=64:isNaN(f)&&(e=64),a=a+this._keyStr.charAt(g)+this._keyStr.charAt(d)+this._keyStr.charAt(h)+this._keyStr.charAt(e);return a},decode:function(c){var a="",d,b,f,g,h,e=0;for(c=c.replace(/[^A-Za-z0-9\+\/\=]/g,"");e<c.length;)d=this._keyStr.indexOf(c.charAt(e++)),b=this._keyStr.indexOf(c.charAt(e++)),g=this._keyStr.indexOf(c.charAt(e++)),h=this._keyStr.indexOf(c.charAt(e++)),d=d<<2|b>>4,b=(b&15)<<4|g>>2,f=(g&3)<<6|h,a+=String.fromCharCode(d),64!=g&&(a+=String.fromCharCode(b)),64!=h&&(a+=String.fromCharCode(f));return a=Base64._utf8_decode(a)},_utf8_encode:function(c){c=c.replace(/\r\n/g,"\n");for(var a="",d=0;d<c.length;d++){var b=c.charCodeAt(d);128>b?a+=String.fromCharCode(b):(127<b&&2048>b?a+=String.fromCharCode(b>>6|192):(a+=String.fromCharCode(b>>12|224),a+=String.fromCharCode(b>>6&63|128)),a+=String.fromCharCode(b&63|128))}return a},_utf8_decode:function(c){for(var a="",d=0,b=c1=c2=0;d<c.length;)b=c.charCodeAt(d),128>b?(a+=String.fromCharCode(b),d++):191<b&&224>b?(c2=c.charCodeAt(d+1),a+=String.fromCharCode((b&31)<<6|c2&63),d+=2):(c2=c.charCodeAt(d+1),c3=c.charCodeAt(d+2),a+=String.fromCharCode((b&15)<<12|(c2&63)<<6|c3&63),d+=3);return a}};

//main init

$copado(function() {
    app.init(credentialId,projectExternalId, projectId, remainingIssues, currentStartMark, projectSprint)
});

</script>
<div style="position: absolute;left: 50%;top: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);">
  <p>
    <button class="slds-button slds-button_neutral" onclick="window.history.go(-1); return false;" > Return to Project </button>
  </p>
</div>
</apex:page>